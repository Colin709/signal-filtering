%%%%%%%%%Signal Class%%%%%%%%%%%%%%%%%%%
% MATLAB Code for Signal Class
% DSP Assignment
% Memorial University of Newfoundland
% Colin King - 200842029 - cbk618
% July 13, 2018
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

classdef filter_class
    %FILTER_CLASS designs the filter based on user input
    %currently don't need constructor
    %filter structure passed in and design function used creates obj
    
    properties
    end
    
    methods(Static)
        
        function designed_filter = ...
                filterDesign(filter_s,samplingf)
            % DESIGNED_FILTER - design either fir or iir filter
            
            filter_s.SampleRate = samplingf;
            
            if strcmp(filter_s.iir_fir,'fir') ...
                    && strcmp(filter_s.design,'Custom Design')
                designed_filter = filter_class.fir_filterDesign(filter_s);
            elseif strcmp(filter_s.iir_fir,'iir') ...
                    && strcmp(filter_s.design,'Custom Design')
                designed_filter = filter_class.iir_filterDesign(filter_s);
            elseif strcmp(filter_s.design,'Minimum Order')
                designed_filter = ...
                    filter_class.MinOrder_filterDesign(filter_s);
            else
                error('Not a valid filter design')
            end
        end
        
        
%         function fir_filter = fir_filterDesign(filter_in)
%             %fir_FILTERDESIGN - creates fir filter
%             
%             if  strcmp(filter_in.response,'lowpass')
%                 fir_filter = designfilt('lowpassfir', ...
%                     'FilterOrder',filter_in.the_order, ...
%                     'CutoffFrequency',filter_in.cutoff_frequency, ...
%                     'DesignMethod','window', ...
%                     'Window',{@kaiser,3},'SampleRate',filter_in.SampleRate);
%             elseif strcmp(filter_in.response,'highpass')
%                 fir_filter = designfilt('highpassfir', ...
%                     'FilterOrder',filter_in.the_order, ...
%                     'CutoffFrequency',filter_in.cutoff_frequency, ...
%                     'DesignMethod','window', ...
%                     'Window',{@kaiser,3},'SampleRate',filter_in.SampleRate);
%             elseif strcmp(filter_in.response,'bandpass')
%                 fir_filter = designfilt('bandpassfir', ...
%                     'FilterOrder',filter_in.the_order, ...
%                     'CutoffFrequency1',filter_in.cutoff_frequency(1),...
%                     'CutoffFrequency2',filter_in.cutoff_frequency(2), ...
%                     'DesignMethod','window', ...
%                     'Window',{@kaiser,3},'SampleRate',filter_in.SampleRate);
%             elseif strcmp(filter_in.response,'bandstop')
%                 fir_filter = designfilt('bandstopfir', ...
%                     'FilterOrder',filter_in.the_order, ...
%                     'CutoffFrequency1',filter_in.cutoff_frequency(1),...
%                     'CutoffFrequency2',filter_in.cutoff_frequency(2), ...
%                     'DesignMethod','window', ...
%                     'Window',{@kaiser,3},'SampleRate',filter_in.SampleRate);
%             else
%                 error('the specified filter is invalid.')
%             end
%         end
        
        
%         function iir_filter = iir_filterDesign(filter_in)
%             %iir_FILTERDESIGN - creates iir filter
%             
%             if  strcmp(filter_in.response,'lowpass')
%                 iir_filter = designfilt('lowpassiir', ...
%                     'FilterOrder',filter_in.the_order, ...
%                     'PassbandFrequency',filter_in.cutoff_frequency, ...
%                     'PassbandRipple',filter_in.the_ripple, ...
%                     'SampleRate',filter_in.SampleRate);
%             elseif strcmp(filter_in.response,'highpass')
%                 iir_filter = designfilt('highpassiir', ...
%                     'FilterOrder',filter_in.the_order, ...
%                     'PassbandFrequency',filter_in.cutoff_frequency, ...
%                     'PassbandRipple',filter_in.the_ripple, ...
%                     'SampleRate',filter_in.SampleRate);
%             elseif strcmp(filter_in.response,'bandpass')
%                 iir_filter = designfilt('bandpassiir', ...
%                     'FilterOrder',filter_in.the_order, ...
%                     'HalfPowerFrequency1',filter_in.cutoff_frequency(1),...
%                     'HalfPowerFrequency2',filter_in.cutoff_frequency(2),...
%                     'SampleRate',filter_in.SampleRate);
%             elseif strcmp(filter_in.response,'bandstop')
%                 iir_filter = designfilt('bandstopiir', ...
%                     'FilterOrder',filter_in.the_order, ...
%                     'HalfPowerFrequency1',filter_in.cutoff_frequency(1),...
%                     'HalfPowerFrequency2',filter_in.cutoff_frequency(2),...
%                     'SampleRate',filter_in.SampleRate);
%             else
%                 error('the specified filter is invalid.')
%             end
%         end
        
        
        function MinOrder_filter = MinOrder_filterDesign(filterMin)
            %MINORDER_FILTERDESIGN - creates a min order filter
            
            if strcmp(filterMin.design_method,'window') || ...
                    strcmp(filterMin.design_method,'cls') || ...
                    strcmp(filterMin.design_method,'ls')
                error('filter method not available for minimum order')
            end
            
            if  strcmp(filterMin.response,'lowpass')
                MinOrder_filter = designfilt(filterMin.irResponse, ...
                    'PassbandFrequency',...
                    filterMin.PassbandFrequency, ...
                    'StopbandFrequency',...
                    filterMin.StopbandFrequency,...
                    'StopbandAttenuation',...
                    filterMin.StopbandAttenuation,...
                    'PassbandRipple',...
                    filterMin.PassbandRipple,...
                    'DesignMethod',filterMin.design_method,...
                    'SampleRate',filterMin.SampleRate);
            elseif strcmp(filterMin.response,'highpass')
                MinOrder_filter = designfilt(filterMin.irResponse, ...
                    'PassbandFrequency', ...
                    filterMin.PassbandFrequency,...
                    'StopbandFrequency', ...
                    filterMin.StopbandFrequency,...
                    'StopbandAttenuation',...
                    filterMin.StopbandAttenuation,...
                    'PassbandRipple',...
                    filterMin.PassbandRipple,...
                    'DesignMethod',filterMin.design_method,...
                    'SampleRate',filterMin.SampleRate);
            elseif strcmp(filterMin.response,'bandpass')
                MinOrder_filter = designfilt(filterMin.irResponse, ...
                    'PassbandFrequency1', ...
                    filterMin.PassbandFrequency,...
                    'StopbandFrequency1', ...
                    filterMin.StopbandFrequency,...
                    'PassbandFrequency2', ...
                    filterMin.PassbandFrequency2,...
                    'StopbandFrequency2', ...
                    filterMin.StopbandFrequency2,...
                    'StopbandAttenuation1',...
                    filterMin.StopbandAttenuation,...
                    'PassbandRipple',...
                    filterMin.PassbandRipple,...
                    'StopbandAttenuation2',...
                    filterMin.StopbandAttenuation2,...
                    'DesignMethod',filterMin.design_method,...
                    'SampleRate',filterMin.SampleRate);
            elseif strcmp(filterMin.response,'bandstop')
                MinOrder_filter = designfilt(filterMin.irResponse, ...
                    'PassbandFrequency1', ...
                    filterMin.PassbandFrequency,...
                    'StopbandFrequency1', ...
                    filterMin.StopbandFrequency,...
                    'PassbandFrequency2', ...
                    filterMin.PassbandFrequency2,...
                    'StopbandFrequency2', ...
                    filterMin.StopbandFrequency2,...
                    'StopbandAttenuation',...
                    filterMin.StopbandAttenuation,...
                    'PassbandRipple1',...
                    filterMin.PassbandRipple,...
                    'PassbandRipple2',...
                    filterMin.PassbandRipple2,...
                    'DesignMethod',filterMin.design_method,...
                    'SampleRate',filterMin.SampleRate);
            else
                error('the specified filter is invalid.')
            end
        end
        
        
    
    end
    
    
end
